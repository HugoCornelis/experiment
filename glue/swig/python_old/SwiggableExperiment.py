# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _SwiggableExperiment
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


int_array = _SwiggableExperiment.int_array
int_destroy = _SwiggableExperiment.int_destroy
int_set = _SwiggableExperiment.int_set
int_get = _SwiggableExperiment.int_get
double_array = _SwiggableExperiment.double_array
double_destroy = _SwiggableExperiment.double_destroy
double_set = _SwiggableExperiment.double_set
double_get = _SwiggableExperiment.double_get
EXPERIMENT_SOURCE_TYPING = _SwiggableExperiment.EXPERIMENT_SOURCE_TYPING
HAVE_FLOAT_H = _SwiggableExperiment.HAVE_FLOAT_H
HAVE_INTTYPES_H = _SwiggableExperiment.HAVE_INTTYPES_H
HAVE_LIMITS_H = _SwiggableExperiment.HAVE_LIMITS_H
HAVE_LOCALECONV = _SwiggableExperiment.HAVE_LOCALECONV
HAVE_LOCALE_H = _SwiggableExperiment.HAVE_LOCALE_H
HAVE_MEMORY_H = _SwiggableExperiment.HAVE_MEMORY_H
HAVE_NEUROSPACES_NEUROSPACES_H = _SwiggableExperiment.HAVE_NEUROSPACES_NEUROSPACES_H
HAVE_STDBOOL_H = _SwiggableExperiment.HAVE_STDBOOL_H
HAVE_STDINT_H = _SwiggableExperiment.HAVE_STDINT_H
HAVE_STDLIB_H = _SwiggableExperiment.HAVE_STDLIB_H
HAVE_STRCHR = _SwiggableExperiment.HAVE_STRCHR
HAVE_STRINGS_H = _SwiggableExperiment.HAVE_STRINGS_H
HAVE_STRING_H = _SwiggableExperiment.HAVE_STRING_H
HAVE_SYS_STAT_H = _SwiggableExperiment.HAVE_SYS_STAT_H
HAVE_SYS_TYPES_H = _SwiggableExperiment.HAVE_SYS_TYPES_H
HAVE_UNISTD_H = _SwiggableExperiment.HAVE_UNISTD_H
HAVE__BOOL = _SwiggableExperiment.HAVE__BOOL
PACKAGE = _SwiggableExperiment.PACKAGE
PACKAGE_BUGREPORT = _SwiggableExperiment.PACKAGE_BUGREPORT
PACKAGE_NAME = _SwiggableExperiment.PACKAGE_NAME
PACKAGE_STRING = _SwiggableExperiment.PACKAGE_STRING
PACKAGE_TARNAME = _SwiggableExperiment.PACKAGE_TARNAME
PACKAGE_VERSION = _SwiggableExperiment.PACKAGE_VERSION
STDC_HEADERS = _SwiggableExperiment.STDC_HEADERS
USE_ID_DISASSEM = _SwiggableExperiment.USE_ID_DISASSEM
USE_SGLIB = _SwiggableExperiment.USE_SGLIB
VERSION = _SwiggableExperiment.VERSION
class OutputGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputGenerator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iVariablesAllocated"] = _SwiggableExperiment.OutputGenerator_iVariablesAllocated_set
    __swig_getmethods__["iVariablesAllocated"] = _SwiggableExperiment.OutputGenerator_iVariablesAllocated_get
    if _newclass:iVariablesAllocated = _swig_property(_SwiggableExperiment.OutputGenerator_iVariablesAllocated_get, _SwiggableExperiment.OutputGenerator_iVariablesAllocated_set)
    __swig_setmethods__["iVariablesActive"] = _SwiggableExperiment.OutputGenerator_iVariablesActive_set
    __swig_getmethods__["iVariablesActive"] = _SwiggableExperiment.OutputGenerator_iVariablesActive_get
    if _newclass:iVariablesActive = _swig_property(_SwiggableExperiment.OutputGenerator_iVariablesActive_get, _SwiggableExperiment.OutputGenerator_iVariablesActive_set)
    __swig_setmethods__["ppdVariables"] = _SwiggableExperiment.OutputGenerator_ppdVariables_set
    __swig_getmethods__["ppdVariables"] = _SwiggableExperiment.OutputGenerator_ppdVariables_get
    if _newclass:ppdVariables = _swig_property(_SwiggableExperiment.OutputGenerator_ppdVariables_get, _SwiggableExperiment.OutputGenerator_ppdVariables_set)
    __swig_setmethods__["dBase"] = _SwiggableExperiment.OutputGenerator_dBase_set
    __swig_getmethods__["dBase"] = _SwiggableExperiment.OutputGenerator_dBase_get
    if _newclass:dBase = _swig_property(_SwiggableExperiment.OutputGenerator_dBase_get, _SwiggableExperiment.OutputGenerator_dBase_set)
    __swig_setmethods__["pcFilename"] = _SwiggableExperiment.OutputGenerator_pcFilename_set
    __swig_getmethods__["pcFilename"] = _SwiggableExperiment.OutputGenerator_pcFilename_get
    if _newclass:pcFilename = _swig_property(_SwiggableExperiment.OutputGenerator_pcFilename_get, _SwiggableExperiment.OutputGenerator_pcFilename_set)
    __swig_setmethods__["pfileOutput"] = _SwiggableExperiment.OutputGenerator_pfileOutput_set
    __swig_getmethods__["pfileOutput"] = _SwiggableExperiment.OutputGenerator_pfileOutput_get
    if _newclass:pfileOutput = _swig_property(_SwiggableExperiment.OutputGenerator_pfileOutput_get, _SwiggableExperiment.OutputGenerator_pfileOutput_set)
    __swig_setmethods__["iSteps"] = _SwiggableExperiment.OutputGenerator_iSteps_set
    __swig_getmethods__["iSteps"] = _SwiggableExperiment.OutputGenerator_iSteps_get
    if _newclass:iSteps = _swig_property(_SwiggableExperiment.OutputGenerator_iSteps_get, _SwiggableExperiment.OutputGenerator_iSteps_set)
    __swig_setmethods__["pcFormat"] = _SwiggableExperiment.OutputGenerator_pcFormat_set
    __swig_getmethods__["pcFormat"] = _SwiggableExperiment.OutputGenerator_pcFormat_get
    if _newclass:pcFormat = _swig_property(_SwiggableExperiment.OutputGenerator_pcFormat_get, _SwiggableExperiment.OutputGenerator_pcFormat_set)
    __swig_setmethods__["iResolution"] = _SwiggableExperiment.OutputGenerator_iResolution_set
    __swig_getmethods__["iResolution"] = _SwiggableExperiment.OutputGenerator_iResolution_get
    if _newclass:iResolution = _swig_property(_SwiggableExperiment.OutputGenerator_iResolution_get, _SwiggableExperiment.OutputGenerator_iResolution_set)
    __swig_setmethods__["iResolutionStep"] = _SwiggableExperiment.OutputGenerator_iResolutionStep_set
    __swig_getmethods__["iResolutionStep"] = _SwiggableExperiment.OutputGenerator_iResolutionStep_get
    if _newclass:iResolutionStep = _swig_property(_SwiggableExperiment.OutputGenerator_iResolutionStep_get, _SwiggableExperiment.OutputGenerator_iResolutionStep_set)
    def __init__(self, *args): 
        this = _SwiggableExperiment.new_OutputGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SwiggableExperiment.delete_OutputGenerator
    __del__ = lambda self : None;
OutputGenerator_swigregister = _SwiggableExperiment.OutputGenerator_swigregister
OutputGenerator_swigregister(OutputGenerator)

OutputGeneratorAddVariable = _SwiggableExperiment.OutputGeneratorAddVariable
OutputGeneratorAnnotatedStep = _SwiggableExperiment.OutputGeneratorAnnotatedStep
OutputGeneratorFinish = _SwiggableExperiment.OutputGeneratorFinish
OutputGeneratorFlush = _SwiggableExperiment.OutputGeneratorFlush
OutputGeneratorInitiate = _SwiggableExperiment.OutputGeneratorInitiate
OutputGeneratorNew = _SwiggableExperiment.OutputGeneratorNew
OutputGeneratorSetFormat = _SwiggableExperiment.OutputGeneratorSetFormat
OutputGeneratorSetSteps = _SwiggableExperiment.OutputGeneratorSetSteps
OutputGeneratorTimedStep = _SwiggableExperiment.OutputGeneratorTimedStep
class simobj_PerfectClamp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simobj_PerfectClamp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simobj_PerfectClamp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pcName"] = _SwiggableExperiment.simobj_PerfectClamp_pcName_set
    __swig_getmethods__["pcName"] = _SwiggableExperiment.simobj_PerfectClamp_pcName_get
    if _newclass:pcName = _swig_property(_SwiggableExperiment.simobj_PerfectClamp_pcName_get, _SwiggableExperiment.simobj_PerfectClamp_pcName_set)
    __swig_setmethods__["iClampsActive"] = _SwiggableExperiment.simobj_PerfectClamp_iClampsActive_set
    __swig_getmethods__["iClampsActive"] = _SwiggableExperiment.simobj_PerfectClamp_iClampsActive_get
    if _newclass:iClampsActive = _swig_property(_SwiggableExperiment.simobj_PerfectClamp_iClampsActive_get, _SwiggableExperiment.simobj_PerfectClamp_iClampsActive_set)
    __swig_setmethods__["pdVoltage"] = _SwiggableExperiment.simobj_PerfectClamp_pdVoltage_set
    __swig_getmethods__["pdVoltage"] = _SwiggableExperiment.simobj_PerfectClamp_pdVoltage_get
    if _newclass:pdVoltage = _swig_property(_SwiggableExperiment.simobj_PerfectClamp_pdVoltage_get, _SwiggableExperiment.simobj_PerfectClamp_pdVoltage_set)
    __swig_setmethods__["dCommand"] = _SwiggableExperiment.simobj_PerfectClamp_dCommand_set
    __swig_getmethods__["dCommand"] = _SwiggableExperiment.simobj_PerfectClamp_dCommand_get
    if _newclass:dCommand = _swig_property(_SwiggableExperiment.simobj_PerfectClamp_dCommand_get, _SwiggableExperiment.simobj_PerfectClamp_dCommand_set)
    __swig_setmethods__["pcFilename"] = _SwiggableExperiment.simobj_PerfectClamp_pcFilename_set
    __swig_getmethods__["pcFilename"] = _SwiggableExperiment.simobj_PerfectClamp_pcFilename_get
    if _newclass:pcFilename = _swig_property(_SwiggableExperiment.simobj_PerfectClamp_pcFilename_get, _SwiggableExperiment.simobj_PerfectClamp_pcFilename_set)
    __swig_setmethods__["pfile"] = _SwiggableExperiment.simobj_PerfectClamp_pfile_set
    __swig_getmethods__["pfile"] = _SwiggableExperiment.simobj_PerfectClamp_pfile_get
    if _newclass:pfile = _swig_property(_SwiggableExperiment.simobj_PerfectClamp_pfile_get, _SwiggableExperiment.simobj_PerfectClamp_pfile_set)
    def __init__(self, *args): 
        this = _SwiggableExperiment.new_simobj_PerfectClamp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SwiggableExperiment.delete_simobj_PerfectClamp
    __del__ = lambda self : None;
simobj_PerfectClamp_swigregister = _SwiggableExperiment.simobj_PerfectClamp_swigregister
simobj_PerfectClamp_swigregister(simobj_PerfectClamp)

PerfectClampAddVariable = _SwiggableExperiment.PerfectClampAddVariable
PerfectClampSingleStep = _SwiggableExperiment.PerfectClampSingleStep
PerfectClampFinish = _SwiggableExperiment.PerfectClampFinish
PerfectClampInitiate = _SwiggableExperiment.PerfectClampInitiate
PerfectClampNew = _SwiggableExperiment.PerfectClampNew
PerfectClampSetFields = _SwiggableExperiment.PerfectClampSetFields


